import pickle
import numpy as np

from sklearn.datasets import make_blobs
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_samples, silhouette_score

import matplotlib.pyplot as plt
import matplotlib.cm as cm
import numpy as np

from sklearn.utils import shuffle

from trajectory import get_categories, get_NTU_categories

dataset = 'HRC'
# dataset = 'NTU_2D'

if dataset == 'HRC':
    with open('/home/s2435462/HRC/results/tsne_silhouette/HRC_ttspcc2_233/tsne.pkl', 'rb') as fo:
        tsne_data = pickle.load(fo)
else:
    with open('/home/s2435462/HRC/results/tsne_silhouette/NTU_ttspcc2_833/tsne.pkl', 'rb') as fo:
        tsne_data = pickle.load(fo)

if dataset == 'HRC':
    dist = {x : 0 for x in range(len(get_categories()))}
    cat = get_categories()
else:
    dist = {x : 0 for x in range(len(get_NTU_categories()))}
    cat = get_NTU_categories()

shortened_embed = {'embeddings' : [],
                   'classes' : []}

zipped = zip(tsne_data['embeddings'].tolist(), tsne_data['classes'].tolist())

print(dist)

for embed, class_ in zipped:
    dist[class_]+=1
    if dist[class_] < 500:
        shortened_embed['embeddings'].append(embed)
        shortened_embed['classes'].append(class_)

print(dist)


if dataset=='HRC':
    n_clusters = 13
else:
    n_clusters = 120

X = tsne_data['embeddings'].tolist()
y = [cat[i] for i in tsne_data['classes']]

# Create a subplot with 1 row and 2 columns
fig, ax1 = plt.subplots()
if dataset == 'HRC':
    fig.set_size_inches(10, 7)
else:
    fig.set_size_inches(7, 70)

# The 1st subplot is the silhouette plot
# The silhouette coefficient can range from -1, 1 but in this example all
# lie within [-0.1, 1]
ax1.set_xlim([-1, 1])
# The (n_clusters+1)*10 is for inserting blank space between silhouette
# plots of individual clusters, to demarcate them clearly.
ax1.set_ylim([0, len(X) + (n_clusters + 1) * 10])

# Initialize the clusterer with n_clusters value and a random generator
# seed of 10 for reproducibility.
print("KMEANS")
clusterer = KMeans(n_clusters=n_clusters, n_init=10, random_state=10)
cluster_labels = clusterer.fit_predict(X)

# The silhouette_score gives the average value for all the samples.
# This gives a perspective into the density and separation of the formed
# clusters
silhouette_avg = silhouette_score(X, cluster_labels)
print(
    "For n_clusters =",
    n_clusters,
    "The average silhouette_score is :",
    silhouette_avg,
)

# Compute the silhouette scores for each sample
sample_silhouette_values = silhouette_samples(X, cluster_labels)

y_lower = 10
for i in range(n_clusters):
    # Aggregate the silhouette scores for samples belonging to
    # cluster i, and sort them
    ith_cluster_silhouette_values = sample_silhouette_values[cluster_labels == i]

    ith_cluster_silhouette_values.sort()

    size_cluster_i = ith_cluster_silhouette_values.shape[0]
    y_upper = y_lower + size_cluster_i

    color = cm.nipy_spectral(float(i) / n_clusters)
    ax1.fill_betweenx(
        np.arange(y_lower, y_upper),
        0,
        ith_cluster_silhouette_values,
        facecolor=color,
        edgecolor=color,
        alpha=0.7,
    )

    # Label the silhouette plots with their cluster numbers at the middle
    ax1.text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))

    # Compute the new y_lower for next plot
    y_lower = y_upper + 10  # 10 for the 0 samples

ax1.set_title("The silhouette plot for the various activity classes.")
ax1.set_xlabel("The silhouette coefficient values")
ax1.set_ylabel("Cluster label")

# The vertical line for average silhouette score of all the values
ax1.axvline(x=silhouette_avg, color="red", linestyle="--")

ax1.set_yticks([])  # Clear the yaxis labels / ticks
ax1.set_xticks([-0.4, -0.2, -0.1, 0, 0.2, 0.4, 0.6, 0.8, 1])

plt.suptitle(
    "Silhouette analysis for embeddings generated by BPTubeFormer on HRC dataset",
    fontsize=14,
    fontweight="bold",
)

if dataset == 'HRC':
    plt.savefig('/home/s2435462/HRC/results/tsne_silhouette/HRC_ttspcc2_233/test_5.png')
else:
    plt.savefig('/home/s2435462/HRC/results/tsne_silhouette/NTU_ttspcc2_833/test_5.png')

plt.show()

print("PLOTTED")
